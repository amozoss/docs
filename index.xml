<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Storj Docs</title><link>/</link><description>Recent content on Storj Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Signup for Auth Token</title><link>/node/before-you-begin/signup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/before-you-begin/signup/</guid><description/></item><item><title>access inspect</title><link>/dcs/api-reference/uplink-cli/access-command/access-inspect-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/access-command/access-inspect-command/</guid><description>access inspect # Usage # Windows ./uplink.exe access inspect [ACCESS-GRANT] [flags] Linux uplink access inspect [ACCESS-GRANT] [flags] macOS uplink access inspect [ACCESS-GRANT] [flags] Flags # Flag Description --access string the serialized access, or name of the access to use --help, -h help for inspect Examples # Windows ./uplink.exe access inspect cheesecake Linux uplink access inspect cheesecake macOS uplink access inspect cheesecake is equivalent to:</description></item><item><title>Access Restrictions</title><link>/dcs/concepts/access/access-grants/api-key/restriction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/access/access-grants/api-key/restriction/</guid><description>Access Restrictions # Granular Access Control with Caveats # Access restrictions are encoded into the API Key within and Access Grant automatically when creating an Access Grant via the Satellite Admin Console, via the CLI, or libuplink library, when using the Share command. While the possibilities for access controls that can be encoded in a Caveat are virtually unlimited, the specific Caveats supported on Storj DCS today are as follows:</description></item><item><title>Ask on our Forum</title><link>/node/have-a-question/ask-on-forum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/have-a-question/ask-on-forum/</guid><description/></item><item><title>Auth Service</title><link>/dcs/concepts/edge-services/auth-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/edge-services/auth-service/</guid><description>Auth Service # Overview # When objects are shared via the Linksharing service or via the S3-compatible hosted gateway, an Access Grant is automatically registered with the Auth Service. The Access Grant used in conjunction with the edge services does contain encryption information for the objects that are within the scope of the Access Grant. Access Grants registered with the Auth Service are encrypted with an encryption key that is not stored or persisted by any Storj Service.</description></item><item><title>Authorization Token</title><link>/node/before-you-begin/auth-token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/before-you-begin/auth-token/</guid><description>Authorization Token # Authorization Token # Make sure you have copied your personal single-use authorization token from the Node Hosting signup page. It looks like this:
If you do not have an authorization token yet, sign up to Hosting a node. By using your authorization token, you agree to the Storage Node Operator Terms and Conditions.</description></item><item><title>AWS CLI Advanced Options</title><link>/dcs/getting-started/gateway-mt/aws-cli-advanced-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/gateway-mt/aws-cli-advanced-options/</guid><description>AWS CLI Advanced Options # Define an endpoint with AWS CLI # AWS CLI v1.x Installing pluginawscli-plugin-endpoint will also install the AWS CLI v1 Install awscli-plugin-endpoint plugin:
~ % pip3 install awscli-plugin-endpoint Configure plugin in your ~/.aws/config file:
~ % aws configure set plugins.endpoint awscli_plugin_endpoint AWS CLI v2.x Install the AWS CLI v2.x
Install awscli-plugin-endpoint plugin:
~ % pip3 install --no-deps awscli-plugin-endpoint Remember the path where the plugin is installed, you will need it in the next step.</description></item><item><title>Common Use Cases</title><link>/dcs/solution-architectures/common-use-cases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/solution-architectures/common-use-cases/</guid><description>Common Use Cases # Optimal object storage uses for Storj DCS # Object storage is ideal for files that are written once and read many times (WORM - Write Once, Read Many data). Object storage has formed the backbone of many different applications and use cases. Distributed and decentralized object storage is optimized for larger files, especially where those files are accessed regularly from geographically diverse locations.
Object storage, in general, has a wide range of use cases.</description></item><item><title>Configuring zkSync Payments</title><link>/node/dependencies/storage-node-operator-payout-information/zk-sync-opt-in-for-snos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/dependencies/storage-node-operator-payout-information/zk-sync-opt-in-for-snos/</guid><description>Configuring zkSync Payments # Background # Storj is continuously innovating to bring the decentralized cloud to the masses
We are excited to bring Layer 2 (L2) ethereum scaling through ZK Rollups to our community. L2 scaling aligns with our goal of bringing decentralized cloud storage to the masses - via more efficient and autonomous payments.
Here are a few of the benefits to receiving payouts through this approach:</description></item><item><title>Container Registry - Docker</title><link>/dcs/how-tos/container-registry-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/container-registry-docker/</guid><description>Container Registry - Docker # Containers are wonderful: Containers provide a powerful way to package and deploy an application and make the runtime environment immutable and reproducible. But using containers also requires more infrastructure - distributing containers requires a docker registry, either a public one (like Dockerhub) or a private instance.
Under the hood, the container registry serves simple REST requests. As Storj DCS also can serve files via HTTP, it can be used as a container registry if the pieces are uploaded in the right order and mode.</description></item><item><title>Coordination Avoidance</title><link>/dcs/concepts/decentralization/coordination-avoidance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/decentralization/coordination-avoidance/</guid><description>Coordination Avoidance # Coordination Avoidance # Rather than coming to a global consensus around the entire state of the network (as in blockchains like ethereum, etc.) The Storj Network is Coordination Avoidant. The network does not need global consistency (as per CAP Theorem) as each uplink user only needs to be able to recover their files.
Advantages Over Coordination-dependant Systems # By ensuring coordination avoidance within Storj DCS, we’re able to deliver better performance and scalability over other decentralized systems—two issues that are critical to achieving broad adoption with traditional storage users.</description></item><item><title>Create Access Grant in CLI</title><link>/dcs/getting-started/quickstart-uplink-cli/generate-access-grants-and-tokens/generate-a-token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/generate-access-grants-and-tokens/generate-a-token/</guid><description>Create Access Grant in CLI # You need to have a satellite account and installed Uplink CLI. To start, proceed through the initial steps of creating a new Access Grant. 3. When given the options to either continue in the browser or in the CLI, select Continue in CLI.
4. Copy and save the Satellite Address and API Key as it will only appear once.
5. Make sure you&amp;rsquo;ve already downloaded the Uplink CLI and run uplink setup.</description></item><item><title>Create an Access Grant</title><link>/dcs/getting-started/quickstart-uplink-cli/uploading-your-first-object/create-first-access-grant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/uploading-your-first-object/create-first-access-grant/</guid><description>Create an Access Grant # You need to have a satellite account and installed Uplink CLI.
Navigate to the Access page within your project and then click on Continue.
Give your new Access Grant a name.
Assign permissions to the Access Grant.
If you click Continue in Browser, our client-side javascript will finalize your access grant with your encryption passphrase. Your data will remain end-to-end encrypted until you explicitly register your access grant with Gateway MT for S3 compatibility.</description></item><item><title>Creating Your Account</title><link>/dcs/getting-started/satellite-developer-account/creating-your-account/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/satellite-developer-account/creating-your-account/</guid><description>Creating Your Account # The first step in creating your developer account on Storj DCS is to select a Satellite. A Satellite is a set of hosted services that is responsible for a range of functions on the network, including the node discovery system, node address information caching, per-object metadata storage, storage node reputation management, billing data aggregation, storage node payment, data audit and repair, as well as user account and authorization management.</description></item><item><title>Docker</title><link>/node/setup/cli/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/setup/cli/docker/</guid><description>Docker # Install Docker # To setup a Storage Node, you first must have Docker installed. Install Docker by following the appropriate installation guide for your OS.
Windows Windows Docker Installation
Please, install version 2.1.0.5 if your Windows doesn&amp;rsquo;t support WSL2: https://docs.docker.com/docker-for-windows/release-notes/#docker-desktop-community-2105
All newer versions for Hyper-V have various issues, such as losing network connection as described in this thread: https://forum.storj.io/t/latest-docker-desktop-for-windows-compatibility/6045
Docker Toolbox is not supported Linux Ubuntu Docker Installation</description></item><item><title>Download Uplink CLI</title><link>/dcs/downloads/download-uplink-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/downloads/download-uplink-cli/</guid><description>Download Uplink CLI # Creating Your Account Install the binary for your OS:
Windows Download the Windows Uplink Binary zip file # In the Downloads folder, right-click and select &amp;ldquo;Extract all&amp;rdquo;
Extract to your user&amp;rsquo;s folder (&amp;quot;Alexey&amp;quot; in this example):
Once extracted, do not try to open the file, as it can only be accessed via command line.
Open Windows PowerShell and continue on to the next step.</description></item><item><title>Gateway ST Advanced Usage</title><link>/dcs/api-reference/s3-gateway/gateway-st-advanced-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/s3-gateway/gateway-st-advanced-usage/</guid><description>Gateway ST Advanced Usage # Configuration options # Adding Access Grants Adding Access Grants # You can add several access grants to the config.yaml. using this format:
access: 14aV.... # default Access accesses.site: 26NBm..... # the Access with name &amp;#34;site&amp;#34; You can see the path to the default config file config.yaml with this command:
Windows ./gateway help Linux gateway help macOS gateway help Running options # Running Gateway ST with an Access Grant Running Gateway ST to host a static website Running the Gateway to host a static website with cache Running Gateway ST with an Access Grant # You can run a gateway with specifying the access grant (or its name) with the option --access, for example:</description></item><item><title>Go</title><link>/dcs/api-reference/storj-client-libraries/go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/storj-client-libraries/go/</guid><description/></item><item><title>Host a Static Website with the Uplink CLI and Linksharing Service</title><link>/dcs/how-tos/host-a-static-website/host-a-static-website-with-the-cli-and-linksharing-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/host-a-static-website/host-a-static-website-with-the-cli-and-linksharing-service/</guid><description>Host a Static Website with the Uplink CLI and Linksharing Service # You can use your own domain name and host your own static website on Storj DCS with the following setup.
Static websites serve files, including HTML, CSS, and Javascript files, exactly as they are stored on the server. All visitors will be served the same files.
Dynamic websites use server-side processing to generate the underlying code behind each page.</description></item><item><title>How Billing is Calculated</title><link>/dcs/billing-payment-and-accounts-1/pricing/billing-and-payment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/pricing/billing-and-payment/</guid><description>How Billing is Calculated # Billing is aggregated at the project level. A project is the Storj DCS service construct used for aggregating usage, calculating billing, invoicing fees, and collecting payment. Projects are created by a single user, then multiple users may be added to a project team, and one user may be on more than one project. Within a project, usage is tracked at the bucket level and aggregated for invoicing to the project.</description></item><item><title>How Encryption is Implemented</title><link>/dcs/concepts/encryption-key/how-encryption-is-implemented/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/encryption-key/how-encryption-is-implemented/</guid><description>How Encryption is Implemented # Ensuring the Privacy and Security of Data on Storj DCS # All data stored on the distributed and decentralized network of storage nodes and all metadata stored on Satellites is encrypted.
By encrypting file-paths, content, and metadata client-side, we avoid the danger of making this data available to attackers, and anyone else who is unable to derive the necessary encryption keys.
The network&amp;rsquo;s encryption method is purposely designed to avoid using the same keys for content encryption of different files and different segments of the same file.</description></item><item><title>How is the online score calculated?</title><link>/node/resources/faq/how-the-online-score-is-calculated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/how-the-online-score-is-calculated/</guid><description>How is the online score calculated? # The implementation matches the design doc here: Storage Node Downtime Tracking with Audits.
In production, we have 12-hour windows and a 30-day tracking period, which translates to 60 windows per tracking period and two windows a day. Every single audit the storage node gets will affect its online score to some extent. For example, if a node got audited during 30 seconds of downtime, that offline audit will have a negative effect on the online_score of the storage node.</description></item><item><title>Key Management</title><link>/dcs/concepts/access/encryption-and-keys/key-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/access/encryption-and-keys/key-management/</guid><description>Key Management # A Word of Caution on encryption keys # At several points in the Documentation it’s important to point out three important things about your encryption keys. Please make sure you clearly understand how encryption keys are used on Storj DCS. You, your application and/or your users are responsible for managing your encryption keys.
If you lose your encryption keys, you have lost the ability to decrypt your data rendering it useless.</description></item><item><title>Linux Configuration for UDP</title><link>/node/dependencies/quic-requirements/linux-configuration-for-udp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/dependencies/quic-requirements/linux-configuration-for-udp/</guid><description>Linux Configuration for UDP # If you are running your node on Linux, you might see warnings about the receive buffer size.
UDP transfers on high-bandwidth connections can be limited by the size of the UDP receive buffer. This buffer holds packets that have been received by the kernel, but not yet read by the application. Once this buffer fills up, the kernel will drop any new incoming packet.</description></item><item><title>List an Object</title><link>/dcs/getting-started/quickstart-uplink-cli/interacting-with-your-first-object/list-an-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/interacting-with-your-first-object/list-an-object/</guid><description>List an Object # List the object in our bucket # To view the cheesecake photo in our bucket, let&amp;rsquo;s use the list command:
Windows ./uplink.exe ls sj://cakes Linux uplink ls sj://cakes macOS uplink ls sj://cakes Result
#</description></item><item><title>meta get</title><link>/dcs/api-reference/uplink-cli/meta-command/meta-get-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/meta-command/meta-get-command/</guid><description>meta get # Usage # Windows ./uplink.exe meta get PATH [KEY] [flags] Linux uplink meta get PATH [KEY] [flags] macOS uplink meta get PATH [KEY] [flags] Flags # Flag Description --access string the serialized access, or name of the access to use --help, -h help for get Retrieve all metadata of an object # Suppose you have uploaded your object with metadata using this command:</description></item><item><title>Migrating from Docker CLI to a GUI Install on Windows</title><link>/node/resources/faq/migrate-my-node/migrating-from-docker-cli-to-a-gui-install-on-windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/migrate-my-node/migrating-from-docker-cli-to-a-gui-install-on-windows/</guid><description>Migrating from Docker CLI to a GUI Install on Windows # Migrating from Docker CLI to a GUI Install on Windows # 1. Make sure the Docker version is stopped and removed.
2. Move orders from the data location to the installation folder location (&amp;quot;%ProgramFiles%\Storj\Storage Node\orders&amp;quot; by default) (PowerShell):
robocopy /MIR /MOVE D:\Storj\orders &amp;#34;$env:ProgramFiles\Storj\Storage Node\orders&amp;#34; 3. Point to the same exact storage folder where you were previously storing the data.</description></item><item><title>Multipart Part Size</title><link>/dcs/api-reference/s3-compatible-gateway/multipart-upload/multipart-part-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/s3-compatible-gateway/multipart-upload/multipart-part-size/</guid><description>Multipart Part Size # For best performance and cost with Storj DCS, you should plan to configure your AWS S3 client library to use a larger part size than standard. Not doing so could result in much higher fees.
We recommend 64MB.
Background # When an object is uploaded using Multipart Upload, a file is first broken into parts, each part of a Multipart Upload is also stored as one or more Segments.</description></item><item><title>Port Forwarding</title><link>/node/dependencies/port-forwarding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/dependencies/port-forwarding/</guid><description>Port Forwarding # Most, if not all ISPs give a dynamic IP address, which means your IP can change at any time. As a work around, you need a dynamic DNS service to ensure your storage node is connected.
Advanced: Already have a Static IP? Configure Port Forwarding ↓
Setup Dynamic DNS Service: Hostname Configuration # If you don&amp;rsquo;t have a static IP, the first step is setting up a hostname.</description></item><item><title>Prerequisites</title><link>/dcs/getting-started/quickstart-uplink-cli/prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/prerequisites/</guid><description>Prerequisites # Create an Account # Click on Start for free
Select a Satellite, and sign up for an account.
After sign up, you will receive a verification email. Click the button prompting you to verify your email.
To get started, the following steps will take you through the process of uploading your first object via the CLI Tool so that you can see how objects uploaded to the network are distributed across the nodes.</description></item><item><title>Prerequisites</title><link>/dcs/getting-started/quickstart-uplink-cli/sharing-your-first-object/prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/sharing-your-first-object/prerequisites/</guid><description>Prerequisites # You need to have the satellite account and installed Uplink CLI.
If you have followed the previous tutorial, you already have a cakes bucket. If you don&amp;rsquo;t, simply create it and re-upload using the following command:
Windows ./uplink.exe mb sj://cakes Linux uplink mb sj://cakes macOS uplink mb sj://cakes Let&amp;rsquo;s (re)upload our cheesecake image:
Windows ./uplink.exe cp ~/Desktop/cheesecake.jpg sj://cakes Linux uplink cp ~/Desktop/cheesecake.jpg sj://cakes macOS uplink cp ~/Desktop/cheesecake.</description></item><item><title>Product Overview</title><link>/dcs/storage/considerations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/storage/considerations/</guid><description>Product Overview # Storj DCS (Decentralized Cloud Storage) is an encrypted, secure, and affordable object storage service that enables you to store, back up, and archive large amounts of data to the decentralized cloud.
To learn how files are uploaded to Storj DCS see how it works.
How Decentralized Cloud Storage Works # When you upload your data to Storj DCS, your data is encrypted, erasure-coded, and spread across a network of statistically uncorrelated peers (Storage Nodes).</description></item><item><title>Promotional Credits</title><link>/dcs/billing-payment-and-accounts-1/storj-token/promotional-credits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/storj-token/promotional-credits/</guid><description>Promotional Credits # The Storj DCS Service includes incentive programs to encourage adoption and use of the platform. These incentives are operationalized as Promotional Credits and include Credits and Coupons.
Credits # Credits are a bonus amount that is deposited to a user’s account that the user receives when paying in STORJ token. Credits may be offered from time to time, at varying percentages, at our sole discretion. You will be notified at the time of your deposit if a Credit is offered.</description></item><item><title>QNAP Storage Node App</title><link>/node/sno-applications/qnap-storage-node-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/sno-applications/qnap-storage-node-app/</guid><description>QNAP Storage Node App # In this guide, we are going to walk through the installation process for the Storage Node QNAP application for your QNAP NAS Device – enabling you to:
Monetize your excess capacity on the Storj Network Back up your NAS Device to the Network using Gateway-MT and any S3-compatible backup solution For a video walkthrough of this process, please see below:
Prerequisites: # Storage Node Identity Download the QNAP Binary Sharing Capacity Prerequisites # First, navigate to QNAP App Center application, by double clicking on its icon on the QNAP Desktop Homepage.</description></item><item><title>Quickstart Guide</title><link>/dcs/getting-started/quickstart-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-guide/</guid><description>Quickstart Guide # Suggested Options # Rclone via Gateway MT - Interact with our S3 Hosted Gateway via Rclone. This is ideal for large files and industry compatibility.
Rclone with Hosted Gateway AWS CLI via Gateway MT - Interact with our S3 hosted gateway using the official AWS CLI. Ideal for high-performance uploads and large files.
Quickstart - AWS CLI and Hosted Gateway MT Alternative Options # Web Object Browser - Allows for uploading and managing files directly through the browser with no command-line tool required.</description></item><item><title>Rclone with Native Integration</title><link>/dcs/how-tos/sync-files-with-rclone/rclone-with-native-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/sync-files-with-rclone/rclone-with-native-integration/</guid><description>Rclone with Native Integration # Selecting an Integration Pattern # Use our native integration pattern to take advantage of client-side encryption as well as to achieve the best possible download performance. Uploads will be erasure-coded locally, thus a 1gb upload will result in 2.68gb of data being uploaded to storage nodes across the network.
Use this pattern for # The strongest security The best download speeds Setup # First, Download and extract the rclone binary onto your system.</description></item><item><title>Storage Node</title><link>/node/setup/gui-windows/storage-node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/setup/gui-windows/storage-node/</guid><description>Storage Node # 1) Download the Windows MSI installer
2) Extract the MSI from the zip and double click it. The installation window will open.
3) Accept the terms of our end-user license agreement.
4) Select the folder you would like the Storage Node software to be installed in.
5) Select the folder your Identity is stored in. When you generate your Storage Node Identity, the identity tool will show you what folder it was saved in.</description></item><item><title>Support Overview</title><link>/dcs/support/support-process-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/support/support-process-overview/</guid><description>Support Overview # We want all of the users of Storj DCS to be successful and take advantage of the benefits decentralized cloud storage offers. We understand that we&amp;rsquo;ll have a users with a range of different levels of experience, different use cases and different technologies being integrated. If you&amp;rsquo;re having an issue or wondering where to get started, we&amp;rsquo;ve got a couple of ways we can help.
Start with the Documentation # There is a lot of information in the Documentation.</description></item><item><title>Understanding Storj DCS</title><link>/dcs/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/overview/</guid><description>Understanding Storj DCS # Overview # Storj makes open-source software that anyone can run - individuals with a Network Attached Storage Device or NAS, those with desktop computers that are always on, businesses, or data centers - that allows these users to share unused disk drive space and bandwidth with the network. Our software aggregates all of that storage capacity and bandwidth to create an extremely secure, private, and durable cloud storage service for developers.</description></item><item><title>access list</title><link>/dcs/api-reference/uplink-cli/access-command/access-list-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/access-command/access-list-command/</guid><description>access list # Usage # Windows ./uplink.exe access list [flags] Linux uplink access list [flags] macOS uplink access list [flags] Flags # Flag Description --access string the serialized access, or name of the access to use --help, -h help for list Examples # Windows ./uplink.exe access list Linux uplink access list macOS uplink access list =========== ACCESSES LIST: name / satellite ================================ cheesecake / 12EayRS2V1kEsWESU9QMRseFhdxYxKicsiFmxrsLZHeLUtdps3S@us1.</description></item><item><title>C</title><link>/dcs/api-reference/storj-client-libraries/c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/storj-client-libraries/c/</guid><description/></item><item><title>Common Architectural Patterns</title><link>/dcs/solution-architectures/common-architectural-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/solution-architectures/common-architectural-patterns/</guid><description>Common Architectural Patterns # There are a standard set of integration patterns in which the Storj Uplink is implemented. This section provides a solution architecture overview of the following integration patterns.
Platform/Service Description Decentralized Advantage Cloud-hosted Gateway S3-compatible cloud hosted gateway providing elastic object storage capacity Easy implementation and broad compatibility. Note: uses server-side encryption Hybrid Cloud On Premise Gateway On-premis to cloud elastic storage capacity Enhanced privacy via end-to-end encryption Cloud Native Applications Web-based applications interact with S3-compatible cloud hosted gateway Server-side encryption and industry-leading access management controls with highly distributed network of storage nodes make it easy to build more secure and private applications Mobile Apps Choose libuplink library for end-to-end encryption or S3-compatible cloud hosted gateway for ease of integration Take advantage edge-based delegated authorization for secure and private file sharing Command Line File Transfer Command line tool for end-to-end encrypted large file transfer between people or environments Fast, easy, secure, private and economical way to move large files Client App Integration Integrate libuplink into applications with native cloud storage use Easily integrate secure, private and economical cloud object storage inn your app (Examples FileZilla, Rclone and Restic) Dapp Integration Add decentralized object storage to your decentralized app S3 compatibility, default multi-region high availability via a network of decentralized storage nodes, and enhanced security and privacy through delegated authorization.</description></item><item><title>cp</title><link>/dcs/api-reference/uplink-cli/cp-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/cp-command/</guid><description>cp # Usage # Windows ./uplink.exe cp [flags] SOURCE DESTINATION Linux uplink cp SOURCE DESTINATION [flags] macOS uplink cp SOURCE DESTINATION [flags] The cp command is used to upload and download objects. The cp command abstracts the complexity of encryption, erasure coding, and distributing pieces of a file to storage nodes.
Flags # Flag Description --access string the serialized access, or name of the access to use --expires string optional expiration date of an object.</description></item><item><title>Create an Access to an Object</title><link>/dcs/getting-started/quickstart-uplink-cli/sharing-your-first-object/generate-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/sharing-your-first-object/generate-access/</guid><description>Create an Access to an Object # There are two ways to share access to an object:
by link sharing by importing the access using uplink CLI In both cases, you can create an access using the uplink share command. For example:
Windows ./uplink.exe share sj://cakes/cheesecake.jpg --export-to cheesecake.access Linux uplink share sj://cakes/cheesecake.jpg --export-to cheesecake.access macOS uplink share sj://cakes/cheesecake.jpg --export-to cheesecake.access An access generated using uplink share with no arguments creates an access to your entire project with read permissions.</description></item><item><title>Dashboard</title><link>/node/setup/gui-windows/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/setup/gui-windows/dashboard/</guid><description>Dashboard # Storage Node Operator Web Dashboard # When you finish the Windows installation for your Storage Node, a Windows shortcut will automatically be created that will open the Storage Node Operator Dashboard in your web browser.
You can also access the dashboard by opening the following URL in your web browser:
Directly on your node: # http://127.0.0.1:14002/ Device on local network: # http://&amp;lt;your-nodes-local-ip&amp;gt;:14002/ Storage Node Dashboard Concepts # Concept Description Satellite Satellites act as the mediator between clients (people up- and downloading data) and Storage Node Operators (people storing data).</description></item><item><title>Debits Against Payment Methods</title><link>/dcs/billing-payment-and-accounts-1/storj-token/debits-against-payment-methods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/storj-token/debits-against-payment-methods/</guid><description>Debits Against Payment Methods # If you have an amount due, your payment methods will be debited in the following order (the order of operations is entirely programmatic):
Coupon - Any valid Coupon on an account will first be used to pay an invoice amount. If the entire invoice is paid with Coupons, no further debits are made in that billing cycle. If, after all Coupons are exhausted in a billing cycle, a balance on an invoice remains, the balance will be debited using the next available payment method; Credits - After applying any Coupons, any valid Credit on an account will then be used to pay an invoice amount.</description></item><item><title>Definitions</title><link>/dcs/concepts/definitions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/definitions/</guid><description>Definitions # The Storj DCS service uses an array of different technologies such as strong encryption and erasure codes to ensure a differentiated level of privacy and security across a network of peer classes. Some of the terms we use may be familiar and some may be new, but if you see a word you don&amp;rsquo;t recognize or see a familiar word in a different context, you&amp;rsquo;ll probably find a useful definition here:</description></item><item><title>Design Decision: End-to-end Encryption</title><link>/dcs/concepts/encryption-key/design-decision-end-to-end-encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/encryption-key/design-decision-end-to-end-encryption/</guid><description>Design Decision: End-to-end Encryption # Strong encryption is critical to decentralized projects especially where a significant part of the infrastructure is run by independent third-party providers. Encryption is especially important with data storage to deliver security + privacy and ensure developers are in control of their data.
End-to-end encryption means that only you have access to your data and the associated metadata. If end-to-end encryption is essential to your use case, Storj DCS provides the Uplink CLI, libuplink library, a variety of developer tools including FileZilla and Rclone, and the self-hosted GatewayST that allow you to ensure data and metadata are encrypted before they ever reach any service operated by Storj or any other third party.</description></item><item><title>Download an Object</title><link>/dcs/getting-started/quickstart-uplink-cli/interacting-with-your-first-object/download-an-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/interacting-with-your-first-object/download-an-object/</guid><description>Download an Object # Download our object # To download our cheesecake photo, let&amp;rsquo;s use the copy command:
Windows ./uplink.exe cp sj://cakes/cheesecake.jpg ~/Downloads/cheesecake.jpg Linux uplink cp sj://cakes/cheesecake.jpg ~/Downloads/cheesecake.jpg macOS uplink cp sj://cakes/cheesecake.jpg ~/Downloads/cheesecake.jpg Result</description></item><item><title>Download Self-hosted S3 Compatible Gateway</title><link>/dcs/downloads/download-self-hosted-s3-compatible-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/downloads/download-self-hosted-s3-compatible-gateway/</guid><description>Download Self-hosted S3 Compatible Gateway # Creating Your Account Self-hosted S3 Compatible Gateway</description></item><item><title>FAQ</title><link>/dcs/support/faqs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/support/faqs/</guid><description>FAQ # How do I navigate to the binary location? # How to navigate to the Desktop folder? Execute the command:
cd ~/Desktop Or use your own location where you extracted the binary. It could be Downloads folder:
cd ~/Downloads If you followed Download Uplink CLI or Download Self-hosted S3 Compatible Gateway - you doesn&amp;rsquo;t need to change the current location. The shell will open the user&amp;rsquo;s home folder by default.</description></item><item><title>Free Plan</title><link>/dcs/billing-payment-and-accounts-1/pricing/free-tier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/pricing/free-tier/</guid><description>Free Plan # Storj DCS currently offers a free level of service to new accounts. When a customer creates a new account, the user automatically is able to use the Storj DCS service at no cost up to specified limits of service. The free level of service is limited to the level of service for a single project as described below:
150GB per month of static object storage for a single project.</description></item><item><title>Manage Projects</title><link>/dcs/getting-started/satellite-developer-account/manage-projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/satellite-developer-account/manage-projects/</guid><description>Manage Projects # When you log into the Satellite Admin Console, you start on the Project Dashboard for your default Project. A Project is the basic unit for aggregating usage, calculating billing, invoicing fees, collecting payment, and handling access management. Users can create multiple Projects and projects are invoiced separately. Within a Project, usage is tracked at the Bucket level and aggregated for invoicing to the Project. Project names are not client-side encrypted so that they may be rendered in the Satellite user interface.</description></item><item><title>Migrating from Windows GUI installation to Docker CLI</title><link>/node/resources/faq/migrate-my-node/migrating-from-windows-gui-installation-to-a-docker-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/migrate-my-node/migrating-from-windows-gui-installation-to-a-docker-cli/</guid><description>Migrating from Windows GUI installation to Docker CLI # Preparing the destination system # 1. Check system requirements
2. Install Docker
On Windows we recommend to install version 2.1.0.5. We do not recommend using later versions as a lot of bugs have been reported. 3. The difference between the Windows GUI and the Docker CLI is where each system stores the data. The Windows GUI version stores data in the path specified in the storage.</description></item><item><title>Prerequisites</title><link>/node/before-you-begin/prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/before-you-begin/prerequisites/</guid><description>Prerequisites # Hardware Requirements (Recommended) # ✅ One (1) processor core dedicated to each node service
✅ 8 TB and a maximum of 24 TB of available space per node
Minimum of 550 GB with no maximum of available space per node
✅ 16+ TB of unmetered bandwidth available per month; unlimited preferred
Minimum of 2 TB of bandwidth available per month
✅ 100 Mbps bandwidth upstream
Minimum of 5 Mbps bandwidth upstream</description></item><item><title>Quickstart - Object Browser</title><link>/dcs/getting-started/quickstart-objectbrowser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-objectbrowser/</guid><description>Quickstart - Object Browser # Introduction # The Storj DCS Satellite Admin Console supports uploading and managing objects directly through the browser with no command-line tool required. This component uses our hosted S3-compatible Gateway service.
By using hosted Gateway MT you are opting in to server-side encryption. Configure Object Browser Access # Navigate to the Buckets page within your project. If you do not have any buckets yet - we will create a demo-bucket for you.</description></item><item><title>Rclone with Hosted Gateway</title><link>/dcs/how-tos/sync-files-with-rclone/rclone-with-hosted-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/sync-files-with-rclone/rclone-with-hosted-gateway/</guid><description>Rclone with Hosted Gateway # Selecting an Integration Pattern # Use our S3 compatible Hosted Gateway integration pattern to increase upload performance and reduce the load on your systems and network. Uploads will be encrypted and erasure-coded server-side, thus a 1GB upload will result in only in 1GB of data being uploaded to storage nodes across the network.
Use this pattern for # Reduced upload time Reduction in network load By selecting this integration pattern you are opting in to server-side encryption Prerequisites # Generate Credentials to the Gateway MT # Navigate to the Access page within your project and then click on Create Access Grant +.</description></item><item><title>Set Up Uplink CLI with Access Grant</title><link>/dcs/getting-started/quickstart-uplink-cli/uploading-your-first-object/set-up-uplink-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/uploading-your-first-object/set-up-uplink-cli/</guid><description>Set Up Uplink CLI with Access Grant # 1. Check Prerequisites.
2. Save Access Grant to a file. The Access Grant that you created in the web interface (or in uplink CLI) needs to be saved to disk in a plain text file for simplicity (for example - Mac terminal would not allow you to paste the whole access grant directly due terminal limitations). Specify the path to the saved access grant in the following command (~/Downloads/accessgrant.</description></item><item><title>Storage Node</title><link>/node/setup/cli/storage-node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/setup/cli/storage-node/</guid><description>Storage Node # Download the Storage Node Docker Container # docker pull storjlabs/storagenode:latest Storage Node Concepts # Before running your Storage Node for the first time, please note the Storage Node concepts to be used.
Concepts Description -p How to specify ports - which are points through which information flows between your Node and the Storj network. -p &amp;lt;host-port&amp;gt;:&amp;lt;container-port&amp;gt;/tcp -p &amp;lt;host-port&amp;gt;:&amp;lt;container-port&amp;gt;/udp /tcpand/udpwill allow your node to connect with the network via both TCP and UDP</description></item><item><title>Using presigned URLs</title><link>/dcs/api-reference/s3-compatible-gateway/using-presigned-urls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/s3-compatible-gateway/using-presigned-urls/</guid><description>Using presigned URLs # Introduction # All objects and paths are private and encrypted by default. However, it is possible to use a pre-signed URL via our S3-compatible gateway to enable unauthenticated customers/users to upload objects to buckets or access objects in buckets without providing an Access Grant or S3-compatible gateway access credentials.
HTTP GET vs Storj Linkshare Service # While we support this behavior via the S3-compatible pre-signed URL function, as an alternative to sharing with a customer/user via a GET, consider utilizing our Linkshare service.</description></item><item><title>When to use different encryption keys</title><link>/dcs/concepts/access/encryption-and-keys/when-to-use-different-encryption-keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/access/encryption-and-keys/when-to-use-different-encryption-keys/</guid><description>When to use different encryption keys # With encryption embedded into Access Grants, it is possible to create multiple Access Grants with the same access authorization but different encryption keys. The default behavior of the Uplink Client is not to display data that the Uplink Client cannot decrypt. It is possible to view the data in it&amp;rsquo;s encrypted state, but it is not possible to derive an encryption key or otherwise reverse engineer an encryption key from an Access Grant with authorization to read data, if that Access Grant does not have an encryption key scoped to the data in question.</description></item><item><title>When to use the Satellite Web Interface and When to use the CLI</title><link>/dcs/concepts/access/access-grants/when-to-use-the-satellite-web-interface-and-when-to-use-the-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/access/access-grants/when-to-use-the-satellite-web-interface-and-when-to-use-the-cli/</guid><description>When to use the Satellite Web Interface and When to use the CLI # You can generate an Access Grant in the Satellite Admin Console, or you can use either our Go Library or the CLI.
When to use the Satellite Admin Console # In general, you use the Satellite Admin Console web interface to create an Access Grant that is then used to set up whatever client tool you are using.</description></item><item><title>Where can I check for a new version?</title><link>/node/resources/faq/where-can-i-check-for-a-new-version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/where-can-i-check-for-a-new-version/</guid><description>Where can I check for a new version? # We have a proposal for the Storage Nodes Operators - let&amp;rsquo;s work together and keep our network up to date to offer a great service to our Customers!
Please, read this thread on the forum: Keeping your node up to date, changes to storage node software! PLEASE READ this thread!
Automatic updater # The best way is to run the recommended Automatic updates (for Docker) - this is not necessary with the Windows GUI version as it already has an automatic updater included, and the Linux version with similar capabilities is coming soon.</description></item><item><title>access register</title><link>/dcs/api-reference/uplink-cli/access-command/access-register/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/access-command/access-register/</guid><description>access register # Usage # Windows ./uplink.exe access register &amp;lt;flags&amp;gt; &amp;lt;ACCESS-GRANT&amp;gt; Linux uplink access register &amp;lt;flags&amp;gt; &amp;lt;ACCESS-GRANT&amp;gt; macOS uplink access register &amp;lt;flags&amp;gt; &amp;lt;ACCESS-GRANT&amp;gt; Flags # Flag Description --access string the serialized access, or name of the access to use --auth-service string the address to the service you wish to register your access with --public if the access should be public.</description></item><item><title>Access Revocation</title><link>/dcs/concepts/access/access-revocation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/access/access-revocation/</guid><description>Access Revocation # While delegated authorization and the ability to generate Access Grants at the edge provides the opportunity to create more private and secure applications, there are design considerations to take into account when building applications with data sharing capabilities based on long-lived bearer tokens.
While it is possible to create Access Grants with time-based restrictions and to required Access Grants be refreshed as they expire, applications must be able to revoke access to data.</description></item><item><title>Android</title><link>/dcs/api-reference/storj-client-libraries/android/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/storj-client-libraries/android/</guid><description/></item><item><title>Changing Payment Methods</title><link>/dcs/billing-payment-and-accounts-1/storj-token/changing-payment-methods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/storj-token/changing-payment-methods/</guid><description>Changing Payment Methods # Users may change payment methods on accounts, but at least one valid payment method must be configured on an account at all times.
Changing Credit Cards # If you want to change the credit card on an account, follow the process outlined above to add a second card under Payment Methods, Add Card.
Once a second card has been added, you may select the new card as the Default card.</description></item><item><title>Community Forum</title><link>/dcs/support/community-forum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/support/community-forum/</guid><description/></item><item><title>Configure Tools for the Partner Program</title><link>/dcs/how-tos/configure-tools-for-the-partner-program/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/configure-tools-for-the-partner-program/</guid><description>Configure Tools for the Partner Program # Partner Program # The Storj Partner Ecosystem enables developers to build Storj DCS Connectors, which their customers can use to store data on Storj DSC.
The data itself is client-side encrypted, however we are able to measure the aggregate volume of storage and bandwidth usage. When a user of a Storj DCS Connector stores data in a bucket, we are able to give the partner attribution for the stored data and the used bandwidth for the Connector Integration, and provide programmatic revenue share.</description></item><item><title>Create a Bucket</title><link>/dcs/getting-started/quickstart-uplink-cli/uploading-your-first-object/create-a-bucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/uploading-your-first-object/create-a-bucket/</guid><description>Create a Bucket # Check Prerequisites.
Create a bucket in our Project # Let&amp;rsquo;s create a bucket to store photos of cake for our &amp;ldquo;food app&amp;rdquo; project:
Windows ./uplink.exe mb sj://cakes Linux uplink mb sj://cakes macOS uplink mb sj://cakes Result</description></item><item><title>Dashboard</title><link>/dcs/getting-started/satellite-developer-account/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/satellite-developer-account/dashboard/</guid><description>Dashboard # When you log into the Satellite Admin Console, you start on the Project Dashboard for your default Project. A Project is the basic unit for aggregating usage, calculating billing, invoicing fees, collecting payment, and handling access management. Users can create multiple Projects and projects are invoiced separately. Within a Project, usage is tracked at the Bucket level and aggregated for invoicing to the Project. Project names are not client-side encrypted so that they may be rendered in the Satellite user interface.</description></item><item><title>Delete an Object</title><link>/dcs/getting-started/quickstart-uplink-cli/interacting-with-your-first-object/delete-an-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/interacting-with-your-first-object/delete-an-object/</guid><description>Delete an Object # Delete our object # Let&amp;rsquo;s delete our photo with the following command:
Windows ./uplink.exe rm sj://cakes/cheesecake.jpg Linux uplink rm sj://cakes/cheesecake.jpg macOS uplink rm sj://cakes/cheesecake.jpg Result</description></item><item><title>Design Decision: Server-side Encryption</title><link>/dcs/concepts/encryption-key/design-decision-server-side-encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/encryption-key/design-decision-server-side-encryption/</guid><description>Design Decision: Server-side Encryption # Strong encryption is critical to decentralized projects especially where a significant part of the infrastructure is run by independent third-party providers. Encryption is especially important with data storage to deliver security + privacy and ensure developers are in control of their data.
It&amp;rsquo;s also important to enable the broadest range of use cases for object storage, and some of those use cases rely on server-side encryption for privacy and security.</description></item><item><title>Download Storj Client Libraries</title><link>/dcs/downloads/download-storj-client-libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/downloads/download-storj-client-libraries/</guid><description>Download Storj Client Libraries # Creating Your Account Storj Client Libraries</description></item><item><title>How do I check my node when I'm away from my machine?</title><link>/node/resources/faq/check-my-node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/check-my-node/</guid><description>How do I check my node when I&amp;rsquo;m away from my machine? # In a future update, we&amp;rsquo;ll have e-mail notifications for when your Node goes down. Until then, a great way to stay updated with your Node&amp;rsquo;s status is to use UptimeRobot.
UptimeRobot will check to see if your port is listening every x minutes. When your port is not listening, you will receive an e-mail alerting you that your port is closed, meaning there&amp;rsquo;s something going on with your Node.</description></item><item><title>How to migrate the Windows GUI node from one physical location to another?</title><link>/node/resources/faq/migrate-my-node/how-to-migrate-the-windows-gui-node-from-a-one-physical-location-to-other/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/migrate-my-node/how-to-migrate-the-windows-gui-node-from-a-one-physical-location-to-other/</guid><description>How to migrate the Windows GUI node from one physical location to another? # To be able to move an existing node to a different physical location (different PC) we should transfer both the node&amp;rsquo;s identity and the data. It is neither sufficient to only migrate the identity nor to only move the data to the new location, we need to do both.
First, we need to know where the identity is currently stored on your original machine.</description></item><item><title>Identity</title><link>/node/dependencies/identity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/dependencies/identity/</guid><description>Identity # Get an authorization token # If you haven&amp;rsquo;t already, get an authorization token. This is required to continue.
Download the Identity Binary # Open a terminal window as a usual user (not administrator or root) and paste the command for your OS:
Windows PowerShell:
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; curl https://github.com/storj/storj/releases/latest/download/identity_windows_amd64.zip -o identity_windows_amd64.zip; Expand-Archive ./identity_windows_amd64.zip . -Force Linux curl -L https://github.com/storj/storj/releases/latest/download/identity_linux_amd64.zip -o identity_linux_amd64.zip unzip -o identity_linux_amd64.zip chmod +x identity sudo mv identity /usr/local/bin/identity ARM-based OS # Raspberry PI:</description></item><item><title>import</title><link>/dcs/api-reference/uplink-cli/import-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/import-command/</guid><description>import # Usage # Windows ./uplink.exe import [flags] NAME (ACCESS | FILE) Linux uplink import [flags] NAME (ACCESS | FILE) macOS uplink import [flags] NAME (ACCESS | FILE) Flags # Flag Description --help, -h help for import --force, -f overwrite the existing access grant Examples # Import access grant from a file # Windows .</description></item><item><title>Import an Access to an Object</title><link>/dcs/getting-started/quickstart-uplink-cli/sharing-your-first-object/import-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/sharing-your-first-object/import-access/</guid><description>Import an Access to an Object # Importing an access is done using the import command.
Import from the file # Windows ./uplink.exe access import cheesecake cheesecake.access Linux uplink access import cheesecake ~/cheesecake.access macOS uplink access import cheesecake ~/cheesecake.access This should give you the following output:
Import from the input # Windows ./uplink.exe access import cheesecake 14dfgh....qr Linux uplink access import cheesecake 14dfgh....qr macOS uplink access import cheesecake 14dfgh.</description></item><item><title>Important Security Consideration</title><link>/node/before-you-begin/important-security-consideration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/before-you-begin/important-security-consideration/</guid><description>Important Security Consideration # Do not connect your computer directly to the internet without the assistance of a firewall. # Make sure you&amp;rsquo;re connected to the Internet through a router and not through a modem without a firewall. Our software serves requests from the Internet, but not all software you may have installed is designed to be exposed to the Internet directly. This is especially true for users on Windows with applications responding to requests on all IPs.</description></item><item><title>Key Architecture Constructs</title><link>/dcs/concepts/key-architecture-constructs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/key-architecture-constructs/</guid><description>Key Architecture Constructs # At a high level, object storage is a well-understood technology with established vendors and standards for integration. Storj DCS brings a number of new capabilities to make it easy for developers to build more secure and private applications and, as with any new and disruptive technology, the key to maximizing the potential value of that technology is understanding how that technology can be practically applied to solve real-world problems.</description></item><item><title>Requesting a Refund</title><link>/dcs/billing-payment-and-accounts-1/requesting-a-refund/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/requesting-a-refund/</guid><description>Requesting a Refund # We want all of our users to receive value when they choose the Storj DCS Platform for their storage needs. While we strive to provide world-class service it is possible that a customer may request a refund. Refunds will only be granted based on the circumstances set forth in the Terms of Use and Terms of Service. Coupons and Credits are not refundable under any circumstances.</description></item><item><title>Search our Knowledge Base</title><link>/node/have-a-question/search-our-knowledge-base/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/have-a-question/search-our-knowledge-base/</guid><description/></item><item><title>Software Updates</title><link>/node/setup/cli/software-updates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/setup/cli/software-updates/</guid><description>Software Updates # Automatic Updates # You can set up automatic updates for your storagenode Docker container using watchtower. Watchtower will look for new updates to the Docker container on Docker Hub in a random interval between 12 and 72 hours and automatically update your storage node when it sees a new version.
First, please pull the latest watchtower image from docker:
docker pull storjlabs/watchtower To set up auto-update for storagenode, please run the following command once:</description></item><item><title>Supported S3 Commands</title><link>/dcs/api-reference/s3-compatible-gateway/supported-s3-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/s3-compatible-gateway/supported-s3-commands/</guid><description>Supported S3 Commands # The Storj DCS S3-compatible Gateway supports a RESTful API that is compatible with the basic data access model of the Amazon S3 API.
The Storj DCS S3 Gateway is well suited for many application architectures, but since the S3 standard was designed for centralized storage, there are a few areas where a decentralized architecture requires a different approach:
API Features Status (support/not supported) Remarks List Buckets Supported ListObjects Supported Object listing does not return a traditionally sorted list because keys are stored encrypted.</description></item><item><title>Usage Limit Increases</title><link>/dcs/billing-payment-and-accounts-1/pricing/usage-limit-increases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/pricing/usage-limit-increases/</guid><description>Usage Limit Increases # If the default Project Limits do not appear to be appropriate for your use case, you may request a Project Limit Increase form. Increases in Project Limits may result in increased costs associated with your usage of Storj DCS.
Free Plan # The Free Tier is not eligible for Project Limit Increases.
Object Storage # When you request an increase to the Object Storage Project Limit, there is no additional fee beyond the cost for any incremental Object Storage utilized on Storj DCS.</description></item><item><title>Buckets</title><link>/dcs/getting-started/satellite-developer-account/objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/satellite-developer-account/objects/</guid><description>Buckets # The Object Browser is a web interface for creating/deleting buckets, uploading, downloading, viewing the object map, and sharing access to objects stored in a Project on Storj DCS.
This is such a popular feature, it has its very own Quickstart Guide for the Object Browser. In the Quickstart Guide for the Object Browser, you&amp;rsquo;ll learn:
Setting your encryption passphrase How to create and delete Buckets How to upload objects to Buckets, download and delete them.</description></item><item><title>Capability Based Access vs Access Control Lists</title><link>/dcs/concepts/access/capability-based-access-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/access/capability-based-access-control/</guid><description>Capability Based Access vs Access Control Lists # From a security-design standpoint, the capability model introduces a fundamentally better approach to identity and access management than Public Cloud’s ACL framework.
By tying access to keys, rather than a centralized control system, capability-based models push security to the edge, decentralizing the large ACL attack vector and creating a more secure IAM system.
The capability-based model solves both the ambient authority trap and the confused deputy problem by design.</description></item><item><title>Check our Github Issues</title><link>/node/have-a-question/check-our-github-issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/have-a-question/check-our-github-issues/</guid><description/></item><item><title>Closing an Account</title><link>/dcs/billing-payment-and-accounts-1/closing-an-account/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/closing-an-account/</guid><description>Closing an Account # We want all of our users to receive value when they choose the Storj DCS Platform for their storage needs, but it’s possible that a user may no longer need Storj DCS services. If a user wants to stop using an account and permanently delete the account, the user may submit a request for this only after following the steps outlined below to eliminate platform usage.</description></item><item><title>Dashboard</title><link>/node/setup/cli/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/setup/cli/dashboard/</guid><description>Dashboard # Storage Node Operator Web Dashboard # If you want to access this dashboard from a device on your local network, in your docker run command, use -p 14002:14002 instead of -p 127.0.0.1:14002:14002
If you want to access this dashboard remotely, use this guide: How to remote access the web dashboard
Open the following URL in your web browser:
Directly on your node: # http://127.0.0.1:14002/ Device on local network: # http://&amp;lt;your-nodes-local-ip&amp;gt;:14002/ Storage Node Dashboard Concepts # Concept Description Satellite Satellites act as the mediator between clients (people up- and downloading data) and Storage Node Operators (people storing data).</description></item><item><title>Deleting a Payment Method</title><link>/dcs/billing-payment-and-accounts-1/storj-token/deleting-a-payment-method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/storj-token/deleting-a-payment-method/</guid><description>Deleting a Payment Method # To use the Storj DCS Paid Tier, a user must have a valid payment method on their account. Users may delete payment methods:
when substituting for another valid payment method; or when requesting the deprovisioning of the account; or when requesting the deletion of an account The process for substituting valid payment methods is outlined above. Once a new payment method is added, the old payment method may be removed.</description></item><item><title>Fastly Integration</title><link>/dcs/how-tos/fastly-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/fastly-integration/</guid><description>Fastly Integration # Prerequisites
Before you can connect your buckets to Fastly, you will first need a Fastly account. Once that is set up, follow the instructions below to configure a Fastly service with your buckets as an origin host.
Setting Up Fastly as an Edge Server # To make your buckets available through the Fastly edge cloud network, you will configure Storj as your Fastly service&amp;rsquo;s origin server.</description></item><item><title>Java</title><link>/dcs/api-reference/storj-client-libraries/java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/storj-client-libraries/java/</guid><description/></item><item><title>Linksharing Service</title><link>/dcs/api-reference/linksharing-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/linksharing-service/</guid><description>Linksharing Service # Overview # The Linksharing service provides an easy way to share an object via a web browser. Linkshare links may be shared with the following features:
Storj DCS Linkshare web page - displays a preview of the shared object, including a streaming player for multimedia files along with a map displaying the geolocation of the storage nodes storing the encrypted and erasure coded pieces of the object Path-based linkshare - displays a list of objects with a shared path in a browser.</description></item><item><title>ls</title><link>/dcs/api-reference/uplink-cli/ls-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/ls-command/</guid><description>ls # Usage # Windows ./uplink.exe ls [sj://BUCKET[/PREFIX]] [flags] Linux uplink ls [sj://BUCKET[/PREFIX]] [flags] macOS uplink ls [sj://BUCKET[/PREFIX]] [flags] Flags # Flag Description --access string the serialized access, or name of the access to use --encrypted if true, show paths as base64-encoded encrypted paths --expanded, -x Use expanded output, showing object expiration times and whether there is custom metadata attached --help, -h help for ls --pending if true, list incomplete objects instead --recursive, -r if true, list recursively Examples # We consider the following object hierarchy throughout these examples:</description></item><item><title>Quickstart - AWS SDK and Hosted Gateway MT</title><link>/dcs/getting-started/quickstart-aws-sdk-and-hosted-gateway-mt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-aws-sdk-and-hosted-gateway-mt/</guid><description>Quickstart - AWS SDK and Hosted Gateway MT # Storj now offers a hosted multitenant gateway (Gateway MT) that is backward compatible with S3. This means you’ll be able to integrate with the Storj network via HTTP, and you won’t have to run anything extra on your end.
By using hosted Gateway MT you are opting-in to server-side encryption. Using Gateway MT with AWS SDK is a 2-step process:</description></item><item><title>Revoke an Access to an Object</title><link>/dcs/getting-started/quickstart-uplink-cli/sharing-your-first-object/revoke-an-access-to-an-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/sharing-your-first-object/revoke-an-access-to-an-object/</guid><description>Revoke an Access to an Object # You can revoke an access grant to an object at any time with the command uplink revoke.
Windows ./uplink.exe revoke asdfRF... Linux uplink revoke asdfRF... macOS uplink revoke asdfRF... The access will be revoked permanently for this parent access grant.
If you want to share this content again you should create a new access grant through the web interface.
Revoke a named access grant # Windows .</description></item><item><title>Status Page</title><link>/dcs/support/status-page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/support/status-page/</guid><description/></item><item><title>Upload an Object</title><link>/dcs/getting-started/quickstart-uplink-cli/uploading-your-first-object/upload-an-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/uploading-your-first-object/upload-an-object/</guid><description>Upload an Object # Check Prerequisites.
The Object we&amp;rsquo;ll upload # Right-click and save as cheesecake.jpg to your Desktop:
Upload our object # To upload our photo, let&amp;rsquo;s use the copy command:
Windows ./uplink.exe cp ~/Desktop/cheesecake.jpg sj://cakes Linux uplink cp ~/Desktop/cheesecake.jpg sj://cakes macOS uplink cp ~/Desktop/cheesecake.jpg sj://cakes Result</description></item><item><title>What if my machine restarts or shuts down?</title><link>/node/resources/faq/machine-restart-shutdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/machine-restart-shutdown/</guid><description>What if my machine restarts or shuts down? # If you have properly mounted your hard drive (if on Linux, using static mount via /etc/fstab), then your Node should start up again automatically after your machine has rebooted.
However, power failures on machines not protected by a UPS or other abrupt disconnections may cause database corruption leading to errors such as: database error: database disk image is malformed or database: file is not a database in your logs).</description></item><item><title>Configure Filebase for easy upload</title><link>/dcs/how-tos/filebase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/filebase/</guid><description/></item><item><title>Access</title><link>/dcs/getting-started/satellite-developer-account/access-grants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/satellite-developer-account/access-grants/</guid><description>Access # An Access Grant is a security envelope that contains a satellite address, a restricted API Key, and a restricted path-based encryption key - everything an application needs to locate an object on the network, access that object, and decrypt it.
Learn more about Access Management and Access Grants or check out the FAQ on Access Grants and Encryption Keys. The Access Grant screen allows you to create or delete Access Grants, and generate credentials for the Storj DCS S3-compatible Gateway from an Access Grant.</description></item><item><title>Access Management at the Edge</title><link>/dcs/concepts/access/access-management-at-the-edge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/access/access-management-at-the-edge/</guid><description>Access Management at the Edge # One of the areas where we’re seeing the strongest interest from developers, customers and partners building apps is our security model and access control layer. The security and privacy capabilities of the platform are some of the most differentiating features and they give our partners and customers some exciting new tools.
Distributed and decentralized cloud storage is a fantastic way to take advantage of underutilized storage and bandwidth, but in order to provide highly available and durable cloud storage, we needed to build in some fairly sophisticated security and privacy controls.</description></item><item><title>Backup With Duplicati</title><link>/dcs/how-tos/backup-with-duplicati/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/backup-with-duplicati/</guid><description>Backup With Duplicati # Overview # Duplicati is a backup tool. It can group, dedupe, and compress small files into bigger blocks. It is a great tool for reducing the costs of cold storage. It also supports versioning.
To restore a small file, Duplicati has to download the entire block it is contained in. Therefore, the best fit for Duplicati are the following two backup use cases: 1. when none of the files contained in the same block need to be ever restored again in the future.</description></item><item><title>Data Retention Policy</title><link>/dcs/billing-payment-and-accounts-1/data-retention-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/data-retention-policy/</guid><description>Data Retention Policy # All unpaid balances must be paid via a valid payment method in a billing cycle. Note that if no valid payment method remains on an account, usage limits may be reduced to zero. If all credit cards expire or are invalid, or the STORJ token balance is exhausted and no new payment method is added on a project, after a reasonable time and opportunity to add a payment method, we reserve the right to reclaim the available resources (the storage space and bandwidth made available by Storage Node Operators to the Storj network) and delete the data from Storj DCS if a valid payment method is not added and any unpaid fees are not paid.</description></item><item><title>Expired Credit Card</title><link>/dcs/billing-payment-and-accounts-1/storj-token/expired-credit-card/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/storj-token/expired-credit-card/</guid><description>Expired Credit Card # If the default credit card on an account expires, an email will be sent to the registered email address on the account notifying the owner of the account that the credit card has expired. If a secondary credit card has been added to the account, the secondary card will be charged for any usage fees, and service will not be interrupted. If a secondary card is not added and the user did not enable a STORJ payment method, a valid payment method must be added to the account.</description></item><item><title>Help Desk</title><link>/dcs/support/help-desk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/support/help-desk/</guid><description/></item><item><title>How do I shutdown my node for system maintenance?</title><link>/node/resources/faq/system-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/system-maintenance/</guid><description>How do I shutdown my node for system maintenance? # If you need to shutdown the Storage Node for maintenance on your system, run:
CLI Install docker stop -t 300 storagenode GUI Windows Install Elevated PowerShell:
Stop-Service storagenode Or click the &amp;ldquo;Stop&amp;rdquo; button in the Windows Services applet on &amp;ldquo;Storj V3 Storage Node&amp;rdquo; service
After you finished your maintenance, restart the Node with:
CLI Install docker start storagenode GUI Windows Install Elevated PowerShell:</description></item><item><title>mb</title><link>/dcs/api-reference/uplink-cli/uplink-mb-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/uplink-mb-command/</guid><description>mb # Usage # Windows ./uplink.exe mb [flags] sj://&amp;lt;BUCKET&amp;gt; Linux uplink mb [flags] sj://&amp;lt;BUCKET&amp;gt; macOS uplink mb [flags] sj://&amp;lt;BUCKET&amp;gt; Flags # Flag Description --access string the serialized access, or name of the access to use --help, -h help for mb Examples # Create bucket # Windows ./uplink.exe mb sj://cakes Linux uplink mb sj://cakes macOS uplink mb sj://cakes Nested buckets are not supported.</description></item><item><title>View Distribution of an Object</title><link>/dcs/getting-started/quickstart-uplink-cli/uploading-your-first-object/view-distribution-of-an-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/quickstart-uplink-cli/uploading-your-first-object/view-distribution-of-an-object/</guid><description>View Distribution of an Object # Check Prerequisites.
You can view the geographic distribution of your object and generate a shareable URL via the Link Sharing Service. Run the uplink share --url command below.
See here for specifications on how to select an auth region and restrict the uplink share --url command.
Windows ./uplink.exe share --url --not-after=+2h sj://cakes/cheesecake.jpg Linux uplink share --url --not-after=+2h sj://cakes/cheesecake.jpg macOS uplink share --url --not-after=+2h sj://cakes/cheesecake.</description></item><item><title>Connectors</title><link>/dcs/concepts/connectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/connectors/</guid><description>Connectors # Building Storj DCS Connectors # Connectors bridge the gap between the applications we use every day and the underlying storage infrastructure on which application data is stored. Our team has worked with our partners to build a series of connectors between Storj DCS, our decentralized cloud storage service, and our partners’ applications.
What is a Storj DCS Connector # A Storj DCS connector is an application-level integration that enables the use of decentralized cloud storage in consumer software.</description></item><item><title>NFT storage for OpenSea</title><link>/dcs/how-tos/nft-storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/nft-storage/</guid><description>NFT storage for OpenSea # Storj DCS makes it easy for NFT (Non-Fungible Token) creators and developers to store their digital art, music, and videos on the decentralized cloud via Storj DCS.
Getting Started with NFT Storage on Storj DCS # In this tutorial, we’re going to cover three main steps:
Upload your Digital Asset to Storj DCS Create a public LinkShare link to your digital asset Register your NFT with the link to the asset Before we get started, here’s some background information on NFTs for context.</description></item><item><title>NodeJS</title><link>/dcs/api-reference/storj-client-libraries/nodejs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/storj-client-libraries/nodejs/</guid><description/></item><item><title>Reporting a Payment Problem</title><link>/dcs/billing-payment-and-accounts-1/storj-token/reporting-a-payment-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/billing-payment-and-accounts-1/storj-token/reporting-a-payment-problem/</guid><description>Reporting a Payment Problem # We use best-in-class partners for payment processing (Stripe for credit card payments and CoinPayments for STORJ utility token transactions). Still, sometimes unanticipated issues can arise.
If the issue is with a credit card payment, please start by submitting a support ticket through our Storj DCS support portal. We will attempt to resolve the issue prior to escalating with Stripe.
If the issue is with a STORJ token transaction, you should first contact CoinPayments to confirm that your STORJ token transaction was received by CoinPayments.</description></item><item><title>Users</title><link>/dcs/getting-started/satellite-developer-account/users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/satellite-developer-account/users/</guid><description>Users # If you need to collaborate with other developers on a project, you can add other developers who have an account on the same Satellite as your project.
When you add another user to your project, that user will have full access to the Project Dashboard, Object Browser, and access Grants for your Project. Navigate to the Users screen.
Select the Add button
Type in the email addresses that the users have registered with their Satellite Accounts.</description></item><item><title>What other commands can I run?</title><link>/node/resources/faq/other-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/other-commands/</guid><description>What other commands can I run? # Run help to see other commands:
CLI Install docker exec -it storagenode /app/storagenode help GUI Windows Install PowerShell:
&amp;amp;&amp;#34;$env:ProgramFiles\Storj\Storage Node\storagenode.exe&amp;#34; --help Run the following to execute other commands:
CLI Install docker exec -it storagenode /app/storagenode &amp;lt;&amp;lt;command&amp;gt;&amp;gt; GUI Windows Install PowerShell:
&amp;amp;&amp;#34;$env:ProgramFiles\Storj\Storage Node\storagenode.exe&amp;#34; &amp;lt;&amp;lt;command&amp;gt;&amp;gt;</description></item><item><title>Billing</title><link>/dcs/getting-started/satellite-developer-account/billing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/satellite-developer-account/billing/</guid><description>Billing # Introduction # The Billing screen allows you to see all your projects and their estimated charges for the Current Billing Period, the Invoices for a Previous Billing Period and Billing History. You can also see an Available Balance, Balance History and Free Credits. At the bottom you can see and add Coupons.
View a Previous Billing Period and Invoices # If you select the Current Billing Period on top right, you will see two additional options:</description></item><item><title>Data Structure</title><link>/dcs/concepts/data-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/data-structure/</guid><description>Data Structure # Hierarchy of Data Storage # Projects
Projects allow you to invite team members, manage billing, and manage access for various apps or users.
Buckets Buckets represent a collection of objects. You can upload, download, list, and delete objects of any size or shape.
Objects
Each object typically includes the data itself, a variable amount of metadata, and a globally unique identifier (Object key) which uniquely identifies the object in a bucket.</description></item><item><title>How do I check my logs?</title><link>/node/resources/faq/check-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/check-logs/</guid><description>How do I check my logs? # You can look at your logs to see if you have some errors indicating that something is not functioning properly:
CLI Install docker logs storagenode Use this command if you just want to see the last 20 lines of the log:
docker logs --tail 20 storagenode For CLI Docker install on Windows, if you have redirected your logs to a file, please execute the following command in PowerShell, inserting your actual path to your log file instead of &amp;ldquo;pathtologfile&amp;rdquo;</description></item><item><title>mv</title><link>/dcs/api-reference/uplink-cli/mv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/mv/</guid><description>mv # Usage # Windows ./uplink.exe mv SOURCE DESTINATION [flags] Linux uplink mv SOURCE DESTINATION [flags] macOS uplink mv SOURCE DESTINATION [flags] The mv command is used to move or rename objects within the same Storj DCS project. The mv command uses a server-side move (rename) method, it does not incur a fee for downloading and will be performed with no delay.
Flags # Flag Description --access string the serialized access, or name of the access to use --help, -h help for mv Examples # Move an object within an existing bucket # When the mv command is used to move a file within Storj DCS, the CLI will move (rename) the object using the server-side method to rename the object.</description></item><item><title>Backup With Restic</title><link>/dcs/how-tos/backup-with-restic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/backup-with-restic/</guid><description>Backup With Restic # Overview # Restic is a backup client written in Go language, it is highly secure and efficient. Each Restic backup is a snapshot of the server/files/directory, deduplicated from what was stored before. Any restore to a given backup will restore the server/files/directories to the exact state they were at that time.
This is a quick-start tutorial that covers Restic usage with Storj DCS.
In this guide, we will cover only some of the basic features of the tool.</description></item><item><title>How do I redirect my logs to a file?</title><link>/node/resources/faq/redirect-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/redirect-logs/</guid><description>How do I redirect my logs to a file? # 1. To redirect the logs to a file, stop your Node:
CLI Install docker stop -t 300 storagenode GUI WIndows Install Elevated PowerShell:
Stop-Service storagenode Or click the &amp;ldquo;Stop&amp;rdquo; button in the Windows Services applet on &amp;ldquo;Storj V3 Storage Node&amp;rdquo; service
2. Then edit your config.yaml (you can use nano or vi editor for Linux/MacOS or Notepad++ for Windows) to add (or change) the log location (see Where can I find a config.</description></item><item><title>rb</title><link>/dcs/api-reference/uplink-cli/rb-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/rb-command/</guid><description>rb # Usage # Windows ./uplink.exe rb sj://BUCKET [flags] Linux uplink rb sj://BUCKET [flags] macOS uplink rb sj://BUCKET [flags] Flags # Flag Description --access string the serialized access, or name of the access to use --force if true, empties the bucket of objects first --help, -h help for rb Examples # Delete empty bucket # Windows .</description></item><item><title>Resources</title><link>/dcs/getting-started/satellite-developer-account/resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/satellite-developer-account/resources/</guid><description>Resources # Here you can select:
Docs Forum Support</description></item><item><title>FileZilla Native Integration</title><link>/dcs/how-tos/set-up-filezilla-for-decentralized-file-transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/set-up-filezilla-for-decentralized-file-transfer/</guid><description>FileZilla Native Integration # The native integration uses end-to-end encryption for your object data, including metadata and path data. This is the only integration available for the free version of Filezilla. If you wish to use the Hosted Gateway MT you will need the paid version of Filezilla. Background # The FileZilla Client is a fast and reliable cross-platform (Windows, Linux and Mac OS X) FTP, FTPS and SFTP client with lots of useful features and an intuitive graphical user interface.</description></item><item><title>How do I check my L2 zkSync payouts?</title><link>/node/resources/faq/how-do-i-check-my-l2-payouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/how-do-i-check-my-l2-payouts/</guid><description>How do I check my L2 zkSync payouts? # If you opted-in for zkSync, you can check your payout in three ways:
Payout section on the Dashboard # You can click the View on zkScan button on the main page of your web-dashboard (see Dashboard for CLI and Dashboard for GUI), as shown in the screenshot of the dashboard Payout section below. This will send you to your zkSync wallet page where you can review the latest L2 payout transactions received.</description></item><item><title>Quick Start</title><link>/dcs/getting-started/satellite-developer-account/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/satellite-developer-account/quick-start/</guid><description>Quick Start # These Quick Start Wizards can help you to use the Satellite Admin Console.</description></item><item><title>rm</title><link>/dcs/api-reference/uplink-cli/rm-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/rm-command/</guid><description>rm # Usage # Windows ./uplink.exe rm sj://BUCKET/KEY [flags] Linux uplink rm sj://BUCKET/KEY [flags] macOS uplink rm sj://BUCKET/KEY [flags] Flags # Flag Description --access string the serialized access, or name of the access to use --encrypted if true, treat paths as base64-encoded encrypted paths --help, -h help for rm --parallelism, -p int Controls how many removes to perform in parallel (default 1) --pending Remove pending object uploads instead --recursive, -r Remove recursively --help, -h help for rm Examples # Delete an object # Windows .</description></item><item><title>File Redundancy</title><link>/dcs/concepts/file-redundancy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/file-redundancy/</guid><description>File Redundancy # Durability and expansion factor # In a decentralized storage network, any storage node could go offline permanently at any time. A storage network’s redundancy strategy must store data in a way that provides access with high probability, even though any given number of individual nodes may be in an offline state. To achieve a specific level of durability (defined as the probability that data remains available in the face of failures), many products in this space (Filecoin, MaidSafe, Siacoin, GFS, Ceph, IPFS, etc.</description></item><item><title>Filezilla Pro Integration Guide</title><link>/dcs/how-tos/filezilla-pro-integration-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/filezilla-pro-integration-guide/</guid><description>Filezilla Pro Integration Guide # How to Integrate Filezilla Pro with Storj DCS to Easily Find, Transfer and Download All Of Your Files # At a quick glance, FileZilla provides a fast and reliable cross-platform (Windows, Linux and Mac OS X) FTP, FTPS and SFTP client that supports connections, file transfers and file structure browsing for many of today’s cloud data storage services, including Storj. This integration is beneficial for developers as it allows them to use the FileZilla Pro client to transfer files point-to-point using the decentralized cloud.</description></item><item><title>How does held back amount work?</title><link>/node/resources/faq/held-back-amount/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/held-back-amount/</guid><description>How does held back amount work? # The held back amount (staked) component provides a preferred way for Node Operators to exit the network. This model optimizes liveliness by deterring Nodes to exit the network without transferring their pieces (thus limiting repair costs). Importantly, this strikes an equilibrium between a very low cost of entry for Nodes while also way to insulate against the cost of data repair.
Nodes don&amp;rsquo;t need to provide any up-front stake to start earning STORJ tokens as a Storage Node Operator.</description></item><item><title>My Account</title><link>/dcs/getting-started/satellite-developer-account/my-account/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/getting-started/satellite-developer-account/my-account/</guid><description>My Account # Introduction # The My Account will allow you to read documentation about the Satellite, change your Account Settings or Logout from the Satellite Admin Console.
If you click the (i) icon on the right of the Satellite short name, you will be redirected to the Key Architectural Construct Satellite.
Account Settings # The Account Settings page allows you to Edit Profile, Change Password or enable/disable Two-Factor Authentication.</description></item><item><title>setup</title><link>/dcs/api-reference/uplink-cli/setup-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/setup-command/</guid><description>setup # Usage # Windows ./uplink.exe setup [flags] Linux uplink setup [flags] macOS uplink setup [flags] Flags # Flag Description --help, -h help for setup Example # 1. Start the CLI wizard.
Windows PowerShell # Navigate to the directory your uplink.exe file is located in.
./uplink.exe setup Linux uplink setup macOS uplink setup 2.</description></item><item><title>How do I change values like wallet address or storage capacity?</title><link>/node/resources/faq/how-do-i-change-my-parameters-such-as-payout-address-allotted-storage-space-and-bandwidth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/how-do-i-change-my-parameters-such-as-payout-address-allotted-storage-space-and-bandwidth/</guid><description>How do I change values like wallet address or storage capacity? # 1. Stop and remove the running Storage Node Docker container (CLI) or stop the service (GUI Windows):
CLI Install docker stop -t 300 storagenode docker rm storagenode GUI Windows Install Elevated PowerShell:
Stop-Service storagenode Or click the &amp;ldquo;Stop&amp;rdquo; button in the Windows Services applet on &amp;ldquo;Storj V3 Storage Node&amp;rdquo; service
2. Run your Storage Node again after editing needed parameters:</description></item><item><title>MongoDB Ops Manager Backup</title><link>/dcs/how-tos/mongodb-ops-manager-backup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/mongodb-ops-manager-backup/</guid><description>MongoDB Ops Manager Backup # Overview # MongoDB is a powerful, flexible, and scalable general purpose database. It combines the ability to scale out with features such as secondary indexes, range queries, sorting, aggregations, and geospatial indexes.
Ops Manager is a management platform that makes it easy to deploy, monitor, back up, and scale MongoDB on your own infrastructure.
MongoDB Enterprise supports a variety of cloud-native deployment options. This gives you and your apps access to locally deployed MongoDB clusters alongside direct access to MongoDB clusters running in the MongoDB Atlas cloud.</description></item><item><title>Multiregion Availability</title><link>/dcs/concepts/multiregion-availability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/multiregion-availability/</guid><description>Multiregion Availability # Breaking the Storj DCS service into multiple peer classes on the network provides the maximum flexibility to network participants. While the majority of the network is operated by third parties, the components and architecture are all designed to be inherently multi-region to meet strict SLAs for availability and durability.
Storage Nodes # One key to the durability of the network is the distribution of data over a heterogeneous network of statistically uncorrelated nodes.</description></item><item><title>How do I setup static mount via /etc/fstab for Linux?</title><link>/node/resources/faq/linux-static-mount/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/linux-static-mount/</guid><description>How do I setup static mount via /etc/fstab for Linux? # First, run the following command and find the name of the hard drive you wish to use (for example sda2)
lsblk Once you find it, we will now get the Unique ID (UUID) of the hard drive
lsblk -d -fs /dev/&amp;lt;location (example: sda2)&amp;gt; Copy the UUID, as well as the FSTYPE. We’ll need that later.
Next, we will create a new directory in the /mnt folder where you want your Storj files to be stored; you can name this directory whatever you would like.</description></item><item><title>Store Tesla Sentry Mode &amp; Dashcam videos on Storj DCS</title><link>/dcs/how-tos/tesla-sentry-mode-teslausb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/tesla-sentry-mode-teslausb/</guid><description>Store Tesla Sentry Mode &amp;amp; Dashcam videos on Storj DCS # In this How To, we&amp;rsquo;ll demonstrate how to automatically transfer Tesla Sentry Mode and Dashcam video clips over WiFi to Storj DCS and make room for more videos the next day. We&amp;rsquo;ll use a Raspberry Pi (a small, low cost, low power computer) plugged into the USB port in the dashboard to store the video files. When the Tesla pulls into your garage at night, the Raspberry Pi will connect via WiFi and upload all the videos to Storj DCS, then clear off the drive for use the next day.</description></item><item><title>Usage Limits</title><link>/dcs/concepts/limits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/limits/</guid><description>Usage Limits # Usage Limits allow us to ensure a consistent level of service for all customers. We have limits for usage established per Project on all Storj DCS Satellites. All limits are set to default values as follows:
PRO Account (Paid Tier) # Credit Card Payment method # Adding a credit card as payment method will result in your per project limits being automatically raised to Pro Account limits:</description></item><item><title>How do I estimate my potential earnings for a given amount of space and bandwidth?</title><link>/node/resources/faq/how-do-i-estimate-my-potential-earnings-for-given-amount-of-space-and-bandwidth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/how-do-i-estimate-my-potential-earnings-for-given-amount-of-space-and-bandwidth/</guid><description>How do I estimate my potential earnings for a given amount of space and bandwidth? # We have a great Community Earnings Estimator to give you an idea how much time it may take to fill your provided free disk space and how much you may earn.
Please be aware - this is only an estimator, not a calculator. Unlike for mining cryptocurrencies, the estimated potential earnings are not guaranteed because the space and bandwidth are used by real people, not machines.</description></item><item><title>How to connect s3fs to Storj DCS</title><link>/dcs/how-tos/how-to-connect-s3fs-to-storj-dcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/how-to-connect-s3fs-to-storj-dcs/</guid><description>How to connect s3fs to Storj DCS # Prerequisites # Before you get started, you need to have already made a satellite account, created an access grant and registered on the self-hosted S3-Compatible Gateway or generated credentials for Storj-hosted S3-Compatible Gateway.
Install s3fs # See https://github.com/s3fs-fuse/s3fs-fuse for installation instructions for your OS.
Configure s3fs to use Storj DCS S3 Gateway # You can use either Self-hosted S3 Compatible Gateway or Storj-hosted S3 Compatible Gateway.</description></item><item><title>Satellite (Metadata Region)</title><link>/dcs/concepts/satellite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/satellite/</guid><description>Satellite (Metadata Region) # The Satellite is a set of hosted services that is responsible for a range of functions on the network, including the node discovery system, node address information caching, per-object metadata storage, storage node reputation management, billing data aggregation, storage node payment, data audit and repair, as well as user account and authorization management.
Users have accounts on and trust specific Satellites. Any user can run their own Satellite, but we expect many users will choose to avoid the operational complexity and create an account on another Satellite hosted by a trusted third party such as Storj Labs, a friend, group, or workplace.</description></item><item><title>How to set up video analytics and video management with Kerberos Vault</title><link>/dcs/how-tos/how-to-set-up-video-analytics-and-video-management-with-kerberos-vault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/how-to-set-up-video-analytics-and-video-management-with-kerberos-vault/</guid><description>How to set up video analytics and video management with Kerberos Vault # Integration with Kerberos.io # The Kerberos.io project (not to be confused with the authentication protocol of the same name) offers an open-source platform for video analytics and monitoring. With a modular system design focused on minimal startup requirements and additional components available to add later, Kerberos.io is built to work for everything from small, personal systems to complex enterprise configurations.</description></item><item><title>S3 Compatibility</title><link>/dcs/concepts/s3-compatibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/s3-compatibility/</guid><description>S3 Compatibility # The Storj DCS S3-compatible Gateway supports a RESTful API that is compatible with the basic data access model of the Amazon S3 API.
The Storj DCS S3 Gateway is well-suited for many application architectures, but the S3 standard was designed for centralized storage and there are a few areas where a decentralized architecture requires a different approach.
Storj DCS offers two options for S3 compatibility: GatewayMT, a hosted S3-compatible service and GatewayST, a self-hosted S3-compatible binary to run your own endpoint (see the compatibility table for GatewayST in our GitHub repo).</description></item><item><title>Why am I not storing more data?</title><link>/node/resources/faq/storing-more-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/storing-more-data/</guid><description>Why am I not storing more data? # The most important aspect to increase the amount of data stored on your Node (and thus maximizing payout) is to build reputation of your Node’s ID over an extended period of time**.**
When a Node first joins the network, there is a probationary period, during which the Node has to prove itself (e.g. maintaining a certain uptime and performance levels, passing all content audits).</description></item><item><title>How to Hod Rod File Transfer Performance on Storj DCS</title><link>/dcs/how-tos/how-to-hod-rod-file-transfer-performance-on-storj-dcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/how-to-hod-rod-file-transfer-performance-on-storj-dcs/</guid><description>How to Hod Rod File Transfer Performance on Storj DCS # Many of the performance benefits of decentralized storage are achieved through distributed, redundant segmentation of files on the network. This redundancy and segmentation allows platforms like Storj to implement parallelism in the network for an even greater performance boost. In the context of file transfers, parallelism is the concept of uploading or downloading different pieces of a file simultaneously (in parallel).</description></item><item><title>Why is the network not using all of my storage and bandwidth?</title><link>/node/resources/faq/storage-bandwidth-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/storage-bandwidth-usage/</guid><description>Why is the network not using all of my storage and bandwidth? # The quick answer is, your Node&amp;rsquo;s reputation is still growing. The Node isn&amp;rsquo;t yet storing stripes of frequently accessed pieces. Luckily for Storage Node Operators, we’ve optimized the network to provide the maximum amount of bandwidth allocation based on the operation of a single node in a bandwidth-constrained environment.
This means that running a single Node per location (where one location = a discrete network with separate IP address and bandwidth/bandwidth cap) will yield the best results (highest reputation, most storage contracts from satellites and most earned STORJ tokens) for Storage Node Operators.</description></item><item><title>Backups with HashBackup</title><link>/dcs/how-tos/backups-with-hashbackup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/backups-with-hashbackup/</guid><description>Backups with HashBackup # One of the most important things you can do to maintain the integrity and accessibility of your files is to routinely perform backups. Data backups are a familiar concept for many, allowing for efficient recovery from lost or damaged files.
The best way to benefit from data backups is to do them regularly. However, frequent backups can quickly start requiring significant storage space. This is especially true for long-term backups.</description></item><item><title>Why are my payouts so low?</title><link>/node/resources/faq/low-payouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/low-payouts/</guid><description>Why are my payouts so low? # If you believe you should have gotten higher payouts, please run the earnings estimator and then compare each Satellite’s payouts to the amount you received in the transactions sent to your payout address for the month in question. Please wait to submit any support ticket until we have announced that all payouts have been completed for the month. Payouts are sent monthly, in the first two weeks after the month being paid is done.</description></item><item><title>How do I estimate my payouts per Satellite?</title><link>/node/resources/faq/estimate-payouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/estimate-payouts/</guid><description>How do I estimate my payouts per Satellite? # If you would like to estimate how much you can expect to get paid for running your Node during a given month, please follow the instructions here.
This information is also available on the Web-dashboard (docker) or Web-dashboard for Windows/Linux GUI.
The script above can be used to check the estimations displayed on the dashboard and correctness of payout. If your node is working properly, the values for both sources should almost be the same.</description></item><item><title>How to use Plex and Storj DCS as a private streaming service</title><link>/dcs/how-tos/how-to-use-plex-and-storj-dcs-as-a-private-streaming-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/how-to-use-plex-and-storj-dcs-as-a-private-streaming-service/</guid><description>How to use Plex and Storj DCS as a private streaming service # Video Storage # Managing a multimedia library can be tedious and time-consuming. Organizing your saved movies and TV shows into a streamable format requires effort to index, sort, and optimize the video files for playback. Fortunately, programs like Plex exist to make this easier. Plex is a media player platform that provides clients for desktop, mobile, and TV devices.</description></item><item><title>How to use Cyberduck and Storj DCS</title><link>/dcs/how-tos/how-to-use-cyberduck-and-storj-dcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/how-to-use-cyberduck-and-storj-dcs/</guid><description>How to use Cyberduck and Storj DCS # Cyberduck is a free open-source libre server - a small server system which enables you to run your own internet services independently - cloud storage browser for macOS, Windows and Linux that supports FTP and SFTP, WebDAV, and cloud storage such as Storj DCS and other cloud storage providers.
Users can leverage the Cyberduck services via the user interface (GUI) or CLI (for Linux), including file transfer by drag and drop and notifications via Growl.</description></item><item><title>Storj IPFS Pinning Service (Beta)</title><link>/dcs/how-tos/storj-ipfs-pinning-service-beta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/storj-ipfs-pinning-service-beta/</guid><description>Storj IPFS Pinning Service (Beta) # Prerequisites # You should have received an email that you have been invited to the beta which will include credentials to access the service. If you have not signed up yet, you can Join the beta. The Storj IPFS Pinning service consists of an HTTP endpoint for uploading and pinning content, and an IPFS Gateway that serves the pinned content over IPFS and HTTP.</description></item><item><title>What if I'm using a remote connection?</title><link>/node/resources/faq/remote-connection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/remote-connection/</guid><description>What if I&amp;rsquo;m using a remote connection? # If you must use a remote connection, due to the length of time it takes for some of the steps, it&amp;rsquo;s highly recommended to run them inside a virtual console like TMUX or SCREEN.
It is recommended to perform the next steps local to the machine, and not via a remote connection.</description></item><item><title>How to remote access the web dashboard</title><link>/node/resources/faq/how-to-remote-access-the-web-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/how-to-remote-access-the-web-dashboard/</guid><description>How to remote access the web dashboard # Enable the web dashboard for your setup # Windows See Dashboard for Windows GUI or Dashboard for docker versionLinux See Dashboard for docker versionmacOS See Dashboard for docker version Install a ssh server on your PC with the storagenode # Windows Get started with OpenSSHLinux sudo apt update &amp;amp;&amp;amp; sudo apt install ssh -y macOS How to Enable SSH on a Mac from the Command Line Install a ssh client on your device # Windows Add-WindowsCapability -Online -Name OpenSSH.</description></item><item><title>Simplify File Management with S3 Browser and Storj DCS</title><link>/dcs/how-tos/simplify-file-management-with-s3-browser-and-storj-dcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/simplify-file-management-with-s3-browser-and-storj-dcs/</guid><description>Simplify File Management with S3 Browser and Storj DCS # S3 Browser is a Windows-based client that provides simple and reliable file management for AWS S3 storage and AWS S3 compatible storage such as Storj DCS. Via the intuitive web file management interface, users can store and retrieve files from their Storj DCS bucket anytime and anywhere.
While S3 Browser is free for personal use, users who wish to utilize the S3 Browser in commercial, business, government, or military institutions, or for any other profit activity, must purchase a pro license.</description></item><item><title>What if I'm using the CLI Install on Windows / MacOS?</title><link>/node/resources/faq/cli-on-windows-mac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/cli-on-windows-mac/</guid><description>What if I&amp;rsquo;m using the CLI Install on Windows / MacOS? # Your Node may require extra monitoring. You may have to frequently restart Docker from the Docker desktop application when your Last Contact shown in the dashboard gets OFFLINE.</description></item><item><title>How to add an additional drive?</title><link>/node/resources/faq/how-to-add-an-additional-drive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/how-to-add-an-additional-drive/</guid><description>How to add an additional drive? # We recommend to run a new node, if you want to add an additional hard drive.
All nodes behind the same subnet /24 of a public IP are treated as a single node for ingress traffic and as separate ones for egress traffic (to the customers, repair and audit) - this is because we want to be decentralized as much as possible.</description></item><item><title>File Repair</title><link>/dcs/concepts/file-repair/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/concepts/file-repair/</guid><description>File Repair # All of the nodes on the network are operated by third party volunteers. One key to the durability of the network is the distribution of data over a heterogeneous network of statistically uncorrelated nodes. Since the storage nodes are operated by different people, in different regions, on different power supplies, with different internet connections, etc., the risk of failure is highly distributed. While the risk of failure for any individual node is very low, the risk of 51 out of 80 nodes failing simultaneously is astronomically low.</description></item><item><title>Kubernetes Backup via Velero</title><link>/dcs/how-tos/kubernetes-backup-via-velero/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/how-tos/kubernetes-backup-via-velero/</guid><description>Kubernetes Backup via Velero # Background # This guide walks through the process of backing up a Kubernetes cluster using Restic with Velero. Velero is a command-line tool that backs up Kubernetes clusters and restores them in case of loss. Velero includes a command-line interface and server-side component that runs inside of your Kubernetes cluster.
Velero lets you:
Take backups of your cluster and restore them in case of loss.</description></item><item><title>share</title><link>/dcs/api-reference/uplink-cli/share-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/share-command/</guid><description>share # Usage # Windows ./uplink.exe share [ALLOWED_PATH_PREFIX]... [flags] Linux uplink share [ALLOWED_PATH_PREFIX]... [flags] macOS uplink share [ALLOWED_PATH_PREFIX]... [flags] An access generated using uplink share with no arguments creates an access to your entire project with read permissions. Flags # Flag Description --access string the serialized access, or name of the access to use --auth-service string url for shared auth service</description></item><item><title>Where can I find the config.yaml?</title><link>/node/resources/faq/where-can-i-find-a-config-yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/node/resources/faq/where-can-i-find-a-config-yaml/</guid><description>Where can I find the config.yaml? # Docker The config.yaml is created in your storage location when you did the initial setup of the storagenode.
For example, if your --mount option in your docker run command looks like --mount type=bind,source=/mnt/storj/storagenode,destination=/app/config, then the config.yaml will be in the /mnt/storj/storagenode location. Options and parameters specified in the docker run command have a precedence over options in the config.yaml - Only options not also specified in the docker run command will be taken from the config.</description></item><item><title>Whitepaper</title><link>/dcs/resources/whitepaper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/resources/whitepaper/</guid><description>The whitepaper can be found here https://www.storj.io/storjv3.pdf</description></item></channel></rss>